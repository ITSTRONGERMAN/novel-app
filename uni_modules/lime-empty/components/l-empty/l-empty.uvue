<template>
	<view class="l-empty">
		<image class="l-empty__image" :style="styles" mode="widthFix" v-if="image != null" :src="imageUrl"></image>
		<text class="l-empty__description" v-if="description != null">{{description}}</text>
		<view class="l-empty__bottom">
			<slot></slot>
		</view>
	</view>
</template>
<script lang="uts" setup>
	import {addUnit} from '@/uni_modules/lime-shared/addUnit';
	import {isNumber} from '@/uni_modules/lime-shared/isNumber';
	import {type Numeric} from './types'
	defineOptions({
		name: 'l-empty'
	})

	const props = defineProps({
		description: String,
		imageSize: {
			// #ifndef APP-ANDROID
			type: [String, Number, Array] as PropType<Numeric | [Numeric, Numeric]>,
			// #endif
			// #ifdef APP-ANDROID
			type: Object,
			// #endif
		},
		image: {
			type: String,
			default: 'default',
		},
	})
	const PRESETS = ['error', 'search', 'default', 'network','cart','404','message', 'coupon', 'comment', 'express', 'order','address']
	const imageUrl = computed(() : string => {
		if (PRESETS.includes(props.image)) {
			return '/uni_modules/lime-empty/static/' + props.image + '.png';
		}
		return props.image
	})
	const styles = computed(():Map<string, any|null> => {
		const style = new Map<string, any|null>()
		const imageSize = props.imageSize
		if(imageSize == null) {
			return style
		}
		if(Array.isArray(imageSize) && (imageSize as any[]).length > 0) {
			const width = addUnit(imageSize[0])
			const height = addUnit(imageSize[1])
			
			style.set('width', width)
			// #ifdef APP-ANDROID
			style.set('height', imageSize.length == 1 ? width:  addUnit(imageSize[1]))
			// #endif
			// #ifndef APP-ANDROID
			style.set('height', addUnit(imageSize[1]))
			// #endif
			return style
		}
		const width = addUnit(imageSize as Numeric)
		style.set('width', width)
		// style.set('height', width)
		return style
	})
</script>
<style lang="scss">
	@import './index';
</style>
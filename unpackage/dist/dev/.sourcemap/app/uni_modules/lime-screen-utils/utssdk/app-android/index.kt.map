{"version":3,"sources":["uni_modules/lime-screen-utils/utssdk/app-android/index.uts","uni_modules/lime-screen-utils/utssdk/interface.uts"],"sourcesContent":["import Activity from \"android.app.Activity\";\nimport Settings from \"android.provider.Settings\";\nimport Window from 'android.view.Window';\nimport WindowManager from 'android.view.WindowManager';\nimport Build from 'android.os.Build';\n// import PowerManager from 'android.os.PowerManager';\n\nimport ContentObserver from \"android.database.ContentObserver\";\n// import Handler from \"android.os.Handler\";\n// import Looper from \"android.os.Looper\";\n\nimport {\n\tSetScreenBrightnessOption,\n\tGeneralCallbackResult,\n\tGetScreenBrightnessOption,\n\tSetKeepScreenOnOption\n} from '../interface.uts'\n\nconst SCREEN_BRIGHTNESS_DEFAULT = (-1).toFloat();\n\n\nclass GeneralCallbackResultImpl implements GeneralCallbackResult {\n\terrMsg : string\n\tconstructor(errMsg : string) {\n\t\tthis.errMsg = errMsg\n\t}\n}\nclass GetScreenBrightnessSuccessCallbackOptionImpl implements GetScreenBrightnessSuccessCallbackOption {\n\terrMsg : string\n\tvalue : number\n\tconstructor(value:number,errMsg : string) {\n\t\tthis.value = value\n\t\tthis.errMsg = errMsg\n\t}\n} \n\nfunction clamp(value: number, min: number, max: number):number {\n\treturn Math.max(min, Math.min(value, max))\n}\n// 监听\nclass BrightnessContentObserver extends ContentObserver {\n\tcontext : Activity\n\tconstructor(handler : Handler, context : Activity) {\n\t\tsuper(handler);\n\t\tthis.context = context\n\t}\n\toverride onChange(selfChange : boolean) {\n\t\t// 当观察到数据变化时，执行相应的操作\n\t\tconst brightness = Settings.System.getInt(this.context.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS);\n\t}\n}\nclass ScreenUtils {\n\tcontext : Activity\n\twindow : Window\n\tbrightness : number = 0\n\tmaxBrightness : number\n\tminBrightness : number\n\tcurBrightness : number\n\tconstructor() {\n\t\tthis.context = UTSAndroid.getUniActivity()!\n\t\tthis.window = this.context.getWindow()\n\t\tthis.curBrightness = this._getScreenBrightness();\n\n\t\tconst getResources = UTSAndroid.getAppContext()!.getResources()\n\t\tconst brightnessSettingMaximumId = getResources.getIdentifier(\"config_screenBrightnessSettingMaximum\", \"integer\", \"android\");\n\t\tconst brightnessSettingMinimumId = getResources.getIdentifier(\"config_screenBrightnessSettingMinimum\", \"integer\", \"android\");\n\t\tthis.maxBrightness = getResources.getInteger(brightnessSettingMaximumId);\n\t\tthis.minBrightness = getResources.getInteger(brightnessSettingMinimumId);\n\n\t\t// const handler = new Handler(Looper.getMainLooper());\n\t\t// const brightnessObserver = new BrightnessContentObserver(handler, this.context);\n\t\t// this.context.getContentResolver().registerContentObserver(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS), false, brightnessObserver);\n\n\t}\n\t_getScreenBrightness() : number {\n\t\treturn Settings.System.getInt(this.context.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS)\n\t}\n\tsetScreenBrightness(option : SetScreenBrightnessOption) {\n\t\ttry {\n\t\t\tlet _brightness = clamp(option.value, 0, 1);\n\t\t\tthis.brightness = _brightness;\n\t\t\tconst attributes = this.window.getAttributes();\n\t\t\tattributes.screenBrightness = _brightness.toFloat();\n\t\t\tUTSAndroid.getUniActivity()!.getWindow().setAttributes(attributes);\n\t\t\t// GeneralCallbackResult()\n\t\t\toption.success?.(new GeneralCallbackResultImpl('成功'))\n\t\t\toption.complete?.(new GeneralCallbackResultImpl('成功'))\n\t\t} catch (e) {\n\t\t\tconst err = JSON.stringify(e)\n\t\t\toption.fail?.(new GeneralCallbackResultImpl(err))\n\t\t\toption.complete?.(new GeneralCallbackResultImpl(err))\n\n\t\t}\n\t}\n\tgetScreenBrightness(option : GetScreenBrightnessOption) {\n\t\ttry {\n\t\t\tconst window = this.context.getWindow();\n\t\t\tconst attributes = window.getAttributes();\n\t\t\tlet screenBrightness = attributes.screenBrightness;\n\t\t\tif (screenBrightness == SCREEN_BRIGHTNESS_DEFAULT) {\n\t\t\t\tscreenBrightness = (this._getScreenBrightness() / this.maxBrightness).toFloat()\n\t\t\t}\n\t\t\tthis.brightness = screenBrightness;\n\t\t\toption.success?.(new GetScreenBrightnessSuccessCallbackOptionImpl(screenBrightness, '成功'))\n\t\t\toption.complete?.(new GeneralCallbackResultImpl('成功'))\n\t\t} catch (e) {\n\t\t\tconst err = JSON.stringify(e)\n\t\t\toption.fail?.(new GeneralCallbackResultImpl(err))\n\t\t\toption.complete?.(new GeneralCallbackResultImpl(err))\n\t\t}\n\t}\n\tsetKeepScreenOn(option:SetKeepScreenOnOption) {\n\t\ttry {\n\t\t\tconst window = this.context.getWindow();\n\t\t\tif(option.keepScreenOn) {\n\t\t\t\twindow.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\t\t\t} else {\n\t\t\t\twindow.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\t\t\t}\n\t\t\toption.success?.(new GeneralCallbackResultImpl('成功'))\n\t\t\toption.complete?.(new GeneralCallbackResultImpl('成功'))\n\t\t} catch (e) {\n\t\t\tconst err = JSON.stringify(e)\n\t\t\toption.fail?.(new GeneralCallbackResultImpl(err))\n\t\t\toption.complete?.(new GeneralCallbackResultImpl(err))\n\t\t}\n\n\t}\n\tprivate checkSelfPermission() : Promise<boolean> {\n\t\tlet permissionNeed = [\"android.permission.WRITE_SETTINGS\", \"android.permission.WAKE_LOCK\"]\n\t\treturn new Promise((resoleve, reject) => {\n\t\t\tUTSAndroid.requestSystemPermission(UTSAndroid.getUniActivity()!, permissionNeed, function (allRight : boolean, grantedList : string[]) {\n\t\t\t\tif (allRight) {\n\t\t\t\t\t// 权限请求成功\t\t\t\n\t\t\t\t\tif (allRight) {\n\t\t\t\t\t\tresoleve(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(grantedList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//用户拒绝了部分权限\n\t\t\t\t}\n\t\t\t}, function (_ : boolean, grantedList : string[]) {\n\t\t\t\treject(grantedList);\n\t\t\t\t//用户拒绝了部分权限\n\t\t\t})\n\t\t})\n\t}\n\tprivate hasWriteSettingsPermission() : boolean {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t\t\treturn Settings.System.canWrite(this.context);\n\t\t}\n\t\treturn true;\n\t}\n\t/**\n\t* 判断是否开启了自动亮度调节\n\t*/\n\tisAutoBrightness() : boolean {\n\t\ttry {\n\t\t\treturn Settings.System.getInt(this.context.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS_MODE) == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC;\n\t\t} catch (e) {\n\t\t\treturn false\n\t\t}\n\t}\n}\n\n\nconst screenUtils = new ScreenUtils();\nexport function setScreenBrightness(option : SetScreenBrightnessOption) {\n\tscreenUtils.setScreenBrightness(option)\n}\nexport function getScreenBrightness(option : GetScreenBrightnessOption) {\n\tscreenUtils.getScreenBrightness(option)\n}\nexport function setKeepScreenOn(option: SetKeepScreenOnOption) {\n\tscreenUtils.setKeepScreenOn(option)\n}\n","/**\n * interface.uts\n * uts插件接口定义文件，按规范定义接口文件可以在HBuilderX中更好的做到语法提示\n */\n\n\nexport interface GeneralCallbackResult {\n\t/** 错误信息 */\n\terrMsg : string\n}\n\n\nexport interface GetScreenBrightnessSuccessCallbackOption {\n\t/** 屏幕亮度值，范围 0 ~ 1，0 最暗，1 最亮 */\n\tvalue : number\n\terrMsg : string\n}\n\n/** 接口调用结束的回调函数（调用成功、失败都会执行） */\ntype GetScreenBrightnessCompleteCallback = (\n\tres : GeneralCallbackResult\n) => void\n\n/** 接口调用失败的回调函数 */\ntype GetScreenBrightnessFailCallback = (res : GeneralCallbackResult) => void\n/** 接口调用成功的回调函数 */\ntype GetScreenBrightnessSuccessCallback = (\n\tres : GetScreenBrightnessSuccessCallbackOption\n) => void\n\nexport type GetScreenBrightnessOption = {\n\t/** 接口调用结束的回调函数（调用成功、失败都会执行） */\n\tcomplete ?: GetScreenBrightnessCompleteCallback\n\t/** 接口调用失败的回调函数 */\n\tfail ?: GetScreenBrightnessFailCallback\n\t/** 接口调用成功的回调函数 */\n\tsuccess ?: GetScreenBrightnessSuccessCallback//(res: GetScreenBrightnessSuccessCallbackOption) => void//GetScreenBrightnessSuccessCallback\n}\n\n\n\n\n/** 接口调用结束的回调函数（调用成功、失败都会执行） */\ntype SetScreenBrightnessCompleteCallback = (\n\tres : GeneralCallbackResult\n) => void\n/** 接口调用失败的回调函数 */\ntype SetScreenBrightnessFailCallback = (res : GeneralCallbackResult) => void\n/** 接口调用成功的回调函数 */\ntype SetScreenBrightnessSuccessCallback = (\n\tres : GeneralCallbackResult\n) => void\n\nexport type SetScreenBrightnessOption = {\n\t/** 屏幕亮度值，范围 0 ~ 1，0 最暗，1 最亮。在安卓端支持传入特殊值 -1，表示屏幕亮度跟随系统变化 */\n\tvalue : number\n\t/** 接口调用结束的回调函数（调用成功、失败都会执行） */\n\tcomplete ?: SetScreenBrightnessCompleteCallback\n\t/** 接口调用失败的回调函数 */\n\tfail ?: SetScreenBrightnessFailCallback\n\t/** 接口调用成功的回调函数 */\n\tsuccess ?: SetScreenBrightnessSuccessCallback\n}\n\n\n\n/** 接口调用结束的回调函数（调用成功、失败都会执行） */\ntype SetKeepScreenOnCompleteCallback = (res : GeneralCallbackResult) => void\n/** 接口调用失败的回调函数 */\ntype SetKeepScreenOnFailCallback = (res : GeneralCallbackResult) => void\n/** 接口调用成功的回调函数 */\ntype SetKeepScreenOnSuccessCallback = (res : GeneralCallbackResult) => void\n\n\nexport type SetKeepScreenOnOption = {\n\t/** 是否保持屏幕常亮 */\n\tkeepScreenOn : boolean\n\t/** 接口调用结束的回调函数（调用成功、失败都会执行） */\n\tcomplete ?: SetKeepScreenOnCompleteCallback\n\t/** 接口调用失败的回调函数 */\n\tfail ?: SetKeepScreenOnFailCallback\n\t/** 接口调用成功的回调函数 */\n\tsuccess ?: SetKeepScreenOnSuccessCallback\n}\n\n"],"names":[],"mappings":"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"}